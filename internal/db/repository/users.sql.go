// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const connectUser = `-- name: ConnectUser :one
UPDATE users
SET jid = $2
WHERE id = $1
RETURNING id, name, phone, password, role, jid, created_at
`

type ConnectUserParams struct {
	ID  int32
	Jid pgtype.Text
}

func (q *Queries) ConnectUser(ctx context.Context, arg ConnectUserParams) (User, error) {
	row := q.db.QueryRow(ctx, connectUser, arg.ID, arg.Jid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Password,
		&i.Role,
		&i.Jid,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users
WHERE id = $1
RETURNING id, name, phone, password, role, jid, created_at
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Password,
		&i.Role,
		&i.Jid,
		&i.CreatedAt,
	)
	return i, err
}

const getLogist = `-- name: GetLogist :one
SELECT id, name, phone, password, role, jid, created_at FROM users 
WHERE role = 'логист'
LIMIT 1
`

func (q *Queries) GetLogist(ctx context.Context) (User, error) {
	row := q.db.QueryRow(ctx, getLogist)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Password,
		&i.Role,
		&i.Jid,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, phone, password, role, jid, created_at FROM users 
WHERE id = $1 
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Password,
		&i.Role,
		&i.Jid,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, name, phone, password, role, jid, created_at FROM users 
WHERE phone = $1 
LIMIT 1
`

func (q *Queries) GetUserByPhone(ctx context.Context, phone string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByPhone, phone)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Password,
		&i.Role,
		&i.Jid,
		&i.CreatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, phone, password, role, jid, created_at FROM users 
ORDER BY created_at DESC 
LIMIT $2 
OFFSET $1
`

type GetUsersParams struct {
	Offset int64
	Limit  int64
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Phone,
			&i.Password,
			&i.Role,
			&i.Jid,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersCount = `-- name: GetUsersCount :one
SELECT COUNT(*) 
FROM users
`

func (q *Queries) GetUsersCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getUsersCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users(name, phone, password, role, jid)
VALUES($1, $2, $3, $4, $5)
RETURNING id, name, phone, password, role, jid, created_at
`

type InsertUserParams struct {
	Name     string
	Phone    string
	Password string
	Role     string
	Jid      pgtype.Text
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.Name,
		arg.Phone,
		arg.Password,
		arg.Role,
		arg.Jid,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Password,
		&i.Role,
		&i.Jid,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name = $2, phone = $3, role = $4
WHERE id = $1
RETURNING id, name, phone, password, role, jid, created_at
`

type UpdateUserParams struct {
	ID    int32
	Name  string
	Phone string
	Role  string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Phone,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Password,
		&i.Role,
		&i.Jid,
		&i.CreatedAt,
	)
	return i, err
}
