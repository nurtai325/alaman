// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: products.sql

package repository

import (
	"context"
)

const deleteProduct = `-- name: DeleteProduct :one
DELETE FROM products
WHERE id = $1
RETURNING id, name, in_stock, price, stock_price, created_at
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRow(ctx, deleteProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.InStock,
		&i.Price,
		&i.StockPrice,
		&i.CreatedAt,
	)
	return i, err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, in_stock, price, stock_price, created_at FROM products 
WHERE id = $1 
LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRow(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.InStock,
		&i.Price,
		&i.StockPrice,
		&i.CreatedAt,
	)
	return i, err
}

const getProductByName = `-- name: GetProductByName :one
SELECT id, name, in_stock, price, stock_price, created_at FROM products
WHERE name = $1 
LIMIT 1
`

func (q *Queries) GetProductByName(ctx context.Context, name string) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByName, name)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.InStock,
		&i.Price,
		&i.StockPrice,
		&i.CreatedAt,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT id, name, in_stock, price, stock_price, created_at FROM products 
ORDER BY created_at DESC 
LIMIT $2 
OFFSET $1
`

type GetProductsParams struct {
	Offset int64
	Limit  int64
}

func (q *Queries) GetProducts(ctx context.Context, arg GetProductsParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProducts, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.InStock,
			&i.Price,
			&i.StockPrice,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsCount = `-- name: GetProductsCount :one
SELECT COUNT(*) 
FROM products
`

func (q *Queries) GetProductsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getProductsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insertProduct = `-- name: InsertProduct :one
INSERT INTO products(name, price, stock_price)
VALUES($1, $2, $3)
RETURNING id, name, in_stock, price, stock_price, created_at
`

type InsertProductParams struct {
	Name       string
	Price      int32
	StockPrice int32
}

func (q *Queries) InsertProduct(ctx context.Context, arg InsertProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, insertProduct, arg.Name, arg.Price, arg.StockPrice)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.InStock,
		&i.Price,
		&i.StockPrice,
		&i.CreatedAt,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET name = $2, price = $3, stock_price = $4, in_stock = $5
WHERE id = $1
RETURNING id, name, in_stock, price, stock_price, created_at
`

type UpdateProductParams struct {
	ID         int32
	Name       string
	Price      int32
	StockPrice int32
	InStock    int32
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.StockPrice,
		arg.InStock,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.InStock,
		&i.Price,
		&i.StockPrice,
		&i.CreatedAt,
	)
	return i, err
}
