// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: leads.sql

package repository

import (
	"context"
)

const getAssignedLeads = `-- name: GetAssignedLeads :many
SELECT id, name, address, phone, completed, user_id, sale_id, created_at FROM leads
WHERE user_id != NULL AND sale_id = NULL
ORDER BY created_at DESC
`

func (q *Queries) GetAssignedLeads(ctx context.Context) ([]Lead, error) {
	rows, err := q.db.Query(ctx, getAssignedLeads)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Lead
	for rows.Next() {
		var i Lead
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Phone,
			&i.Completed,
			&i.UserID,
			&i.SaleID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompletedLeads = `-- name: GetCompletedLeads :many
SELECT id, name, address, phone, completed, user_id, sale_id, created_at FROM leads
WHERE completed = true
ORDER BY created_at DESC
`

func (q *Queries) GetCompletedLeads(ctx context.Context) ([]Lead, error) {
	rows, err := q.db.Query(ctx, getCompletedLeads)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Lead
	for rows.Next() {
		var i Lead
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Phone,
			&i.Completed,
			&i.UserID,
			&i.SaleID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInDeliveryLeads = `-- name: GetInDeliveryLeads :many
SELECT id, name, address, phone, completed, user_id, sale_id, created_at FROM leads
WHERE user_id != NULL AND sale_id != NULL AND completed = false
ORDER BY created_at DESC
`

func (q *Queries) GetInDeliveryLeads(ctx context.Context) ([]Lead, error) {
	rows, err := q.db.Query(ctx, getInDeliveryLeads)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Lead
	for rows.Next() {
		var i Lead
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Phone,
			&i.Completed,
			&i.UserID,
			&i.SaleID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNewLeads = `-- name: GetNewLeads :many
SELECT id, name, address, phone, completed, user_id, sale_id, created_at FROM leads AS l
WHERE user_id = NULL
ORDER BY created_at DESC
`

func (q *Queries) GetNewLeads(ctx context.Context) ([]Lead, error) {
	rows, err := q.db.Query(ctx, getNewLeads)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Lead
	for rows.Next() {
		var i Lead
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Phone,
			&i.Completed,
			&i.UserID,
			&i.SaleID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
