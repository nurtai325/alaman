// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reports.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteReport = `-- name: DeleteReport :one
DELETE FROM reports
WHERE id = $1
RETURNING id, name, path, start_at, end_at, created_at
`

func (q *Queries) DeleteReport(ctx context.Context, id int32) (Report, error) {
	row := q.db.QueryRow(ctx, deleteReport, id)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.StartAt,
		&i.EndAt,
		&i.CreatedAt,
	)
	return i, err
}

const getProductIncoming = `-- name: GetProductIncoming :one
SELECT SUM(quantity)
FROM product_changes
WHERE product_id = $1 AND created_at > $2 AND created_at < $3 AND is_income = TRUE
`

type GetProductIncomingParams struct {
	ProductID   int32
	CreatedAt   pgtype.Timestamptz
	CreatedAt_2 pgtype.Timestamptz
}

func (q *Queries) GetProductIncoming(ctx context.Context, arg GetProductIncomingParams) (int64, error) {
	row := q.db.QueryRow(ctx, getProductIncoming, arg.ProductID, arg.CreatedAt, arg.CreatedAt_2)
	var sum int64
	err := row.Scan(&sum)
	return sum, err
}

const getProductOutcoming = `-- name: GetProductOutcoming :one
SELECT SUM(quantity)
FROM product_changes
WHERE product_id = $1 AND created_at > $2 AND created_at < $3 AND is_income = FALSE
`

type GetProductOutcomingParams struct {
	ProductID   int32
	CreatedAt   pgtype.Timestamptz
	CreatedAt_2 pgtype.Timestamptz
}

func (q *Queries) GetProductOutcoming(ctx context.Context, arg GetProductOutcomingParams) (int64, error) {
	row := q.db.QueryRow(ctx, getProductOutcoming, arg.ProductID, arg.CreatedAt, arg.CreatedAt_2)
	var sum int64
	err := row.Scan(&sum)
	return sum, err
}

const getReport = `-- name: GetReport :one
SELECT id, name, path, start_at, end_at, created_at FROM reports
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetReport(ctx context.Context, id int32) (Report, error) {
	row := q.db.QueryRow(ctx, getReport, id)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.StartAt,
		&i.EndAt,
		&i.CreatedAt,
	)
	return i, err
}

const getReportByProduct = `-- name: GetReportByProduct :one
SELECT 
	COALESCE(SUM(sl.sale_count), 0) AS sale_count_sum, 
	COALESCE(SUM(sl.quantity), 0) AS sold, 
	COALESCE(SUM(sl.price), 0) AS sold_sum
FROM sale_items AS sl
WHERE sl.product_id = $1 
AND sl.created_at > $2 
AND sl.created_at < $3
`

type GetReportByProductParams struct {
	ProductID   int32
	CreatedAt   pgtype.Timestamptz
	CreatedAt_2 pgtype.Timestamptz
}

type GetReportByProductRow struct {
	SaleCountSum pgtype.Int8
	Sold         pgtype.Int8
	SoldSum      pgtype.Float4
}

func (q *Queries) GetReportByProduct(ctx context.Context, arg GetReportByProductParams) (GetReportByProductRow, error) {
	row := q.db.QueryRow(ctx, getReportByProduct, arg.ProductID, arg.CreatedAt, arg.CreatedAt_2)
	var i GetReportByProductRow
	err := row.Scan(&i.SaleCountSum, &i.Sold, &i.SoldSum)
	return i, err
}

const getReports = `-- name: GetReports :many
SELECT id, name, path, start_at, end_at, created_at FROM reports
ORDER BY created_at DESC
`

func (q *Queries) GetReports(ctx context.Context) ([]Report, error) {
	rows, err := q.db.Query(ctx, getReports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Report
	for rows.Next() {
		var i Report
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Path,
			&i.StartAt,
			&i.EndAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertReport = `-- name: InsertReport :one
INSERT INTO reports(name, path, start_at, end_at)
VALUES($1, $2, $3, $4)
RETURNING id, name, path, start_at, end_at, created_at
`

type InsertReportParams struct {
	Name    string
	Path    string
	StartAt pgtype.Timestamptz
	EndAt   pgtype.Timestamptz
}

func (q *Queries) InsertReport(ctx context.Context, arg InsertReportParams) (Report, error) {
	row := q.db.QueryRow(ctx, insertReport,
		arg.Name,
		arg.Path,
		arg.StartAt,
		arg.EndAt,
	)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.StartAt,
		&i.EndAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateReport = `-- name: UpdateReport :one
UPDATE reports
SET name = $2
WHERE id = $1
RETURNING id, name, path, start_at, end_at, created_at
`

type UpdateReportParams struct {
	ID   int32
	Name string
}

func (q *Queries) UpdateReport(ctx context.Context, arg UpdateReportParams) (Report, error) {
	row := q.db.QueryRow(ctx, updateReport, arg.ID, arg.Name)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.StartAt,
		&i.EndAt,
		&i.CreatedAt,
	)
	return i, err
}
