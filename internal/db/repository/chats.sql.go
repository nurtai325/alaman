// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: chats.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteChat = `-- name: DeleteChat :one
DELETE FROM chats
WHERE id = $1
RETURNING id, lead_id, user_id, created_at
`

func (q *Queries) DeleteChat(ctx context.Context, id int32) (Chat, error) {
	row := q.db.QueryRow(ctx, deleteChat, id)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.LeadID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :one
DELETE FROM messages
WHERE id = $1
RETURNING id, text, path, type, is_sent, chat_id, created_at
`

func (q *Queries) DeleteMessage(ctx context.Context, id int32) (Message, error) {
	row := q.db.QueryRow(ctx, deleteMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Path,
		&i.Type,
		&i.IsSent,
		&i.ChatID,
		&i.CreatedAt,
	)
	return i, err
}

const getChat = `-- name: GetChat :one
SELECT id, lead_id, user_id, created_at FROM chats 
WHERE id = $1 
LIMIT 1
`

func (q *Queries) GetChat(ctx context.Context, id int32) (Chat, error) {
	row := q.db.QueryRow(ctx, getChat, id)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.LeadID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const getChatByLeadId = `-- name: GetChatByLeadId :one
SELECT id, lead_id, user_id, created_at FROM chats 
WHERE lead_id = $1 
LIMIT 1
`

func (q *Queries) GetChatByLeadId(ctx context.Context, leadID int32) (Chat, error) {
	row := q.db.QueryRow(ctx, getChatByLeadId, leadID)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.LeadID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const getChats = `-- name: GetChats :many
SELECT id, lead_id, user_id, created_at FROM chats 
ORDER BY created_at DESC 
LIMIT $2 
OFFSET $1
`

type GetChatsParams struct {
	Offset int64
	Limit  int64
}

func (q *Queries) GetChats(ctx context.Context, arg GetChatsParams) ([]Chat, error) {
	rows, err := q.db.Query(ctx, getChats, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chat
	for rows.Next() {
		var i Chat
		if err := rows.Scan(
			&i.ID,
			&i.LeadID,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChatsCount = `-- name: GetChatsCount :one
SELECT COUNT(*) 
FROM chats
`

func (q *Queries) GetChatsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getChatsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getMessage = `-- name: GetMessage :one
SELECT id, text, path, type, is_sent, chat_id, created_at FROM messages
WHERE id = $1 
LIMIT 1
`

func (q *Queries) GetMessage(ctx context.Context, id int32) (Message, error) {
	row := q.db.QueryRow(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Path,
		&i.Type,
		&i.IsSent,
		&i.ChatID,
		&i.CreatedAt,
	)
	return i, err
}

const getMessages = `-- name: GetMessages :many
SELECT id, text, path, type, is_sent, chat_id, created_at FROM messages 
WHERE chat_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetMessages(ctx context.Context, chatID int32) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessages, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.Path,
			&i.Type,
			&i.IsSent,
			&i.ChatID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesCount = `-- name: GetMessagesCount :one
SELECT COUNT(*) 
FROM messages
`

func (q *Queries) GetMessagesCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getMessagesCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insertChat = `-- name: InsertChat :one
INSERT INTO chats(lead_id, user_id)
VALUES($1, $2)
RETURNING id, lead_id, user_id, created_at
`

type InsertChatParams struct {
	LeadID int32
	UserID int32
}

func (q *Queries) InsertChat(ctx context.Context, arg InsertChatParams) (Chat, error) {
	row := q.db.QueryRow(ctx, insertChat, arg.LeadID, arg.UserID)
	var i Chat
	err := row.Scan(
		&i.ID,
		&i.LeadID,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const insertMessage = `-- name: InsertMessage :one
INSERT INTO messages(text, path, type, is_sent, chat_id)
VALUES($1, $2, $3, $4, $5)
RETURNING id, text, path, type, is_sent, chat_id, created_at
`

type InsertMessageParams struct {
	Text   pgtype.Text
	Path   pgtype.Text
	Type   string
	IsSent bool
	ChatID int32
}

func (q *Queries) InsertMessage(ctx context.Context, arg InsertMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, insertMessage,
		arg.Text,
		arg.Path,
		arg.Type,
		arg.IsSent,
		arg.ChatID,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Path,
		&i.Type,
		&i.IsSent,
		&i.ChatID,
		&i.CreatedAt,
	)
	return i, err
}
