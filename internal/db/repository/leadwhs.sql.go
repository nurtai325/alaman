// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: leadwhs.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const connectLeadWh = `-- name: ConnectLeadWh :one
UPDATE lead_whs 
SET jid = $2
WHERE id = $1
RETURNING id, name, phone, jid, created_at
`

type ConnectLeadWhParams struct {
	ID  int32
	Jid pgtype.Text
}

func (q *Queries) ConnectLeadWh(ctx context.Context, arg ConnectLeadWhParams) (LeadWh, error) {
	row := q.db.QueryRow(ctx, connectLeadWh, arg.ID, arg.Jid)
	var i LeadWh
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Jid,
		&i.CreatedAt,
	)
	return i, err
}

const deleteLeadWh = `-- name: DeleteLeadWh :one
DELETE FROM lead_whs 
WHERE id = $1
RETURNING id, name, phone, jid, created_at
`

func (q *Queries) DeleteLeadWh(ctx context.Context, id int32) (LeadWh, error) {
	row := q.db.QueryRow(ctx, deleteLeadWh, id)
	var i LeadWh
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Jid,
		&i.CreatedAt,
	)
	return i, err
}

const getLeadWh = `-- name: GetLeadWh :one
SELECT id, name, phone, jid, created_at FROM lead_whs 
WHERE id = $1 
LIMIT 1
`

func (q *Queries) GetLeadWh(ctx context.Context, id int32) (LeadWh, error) {
	row := q.db.QueryRow(ctx, getLeadWh, id)
	var i LeadWh
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Jid,
		&i.CreatedAt,
	)
	return i, err
}

const getLeadWhs = `-- name: GetLeadWhs :many
SELECT id, name, phone, jid, created_at FROM lead_whs 
ORDER BY created_at DESC 
LIMIT $2 
OFFSET $1
`

type GetLeadWhsParams struct {
	Offset int64
	Limit  int64
}

func (q *Queries) GetLeadWhs(ctx context.Context, arg GetLeadWhsParams) ([]LeadWh, error) {
	rows, err := q.db.Query(ctx, getLeadWhs, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LeadWh
	for rows.Next() {
		var i LeadWh
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Phone,
			&i.Jid,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLeadWhsCount = `-- name: GetLeadWhsCount :one
SELECT COUNT(*) 
FROM lead_whs
`

func (q *Queries) GetLeadWhsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getLeadWhsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insertLeadWh = `-- name: InsertLeadWh :one
INSERT INTO lead_whs(name, phone, jid)
VALUES($1, $2, $3)
RETURNING id, name, phone, jid, created_at
`

type InsertLeadWhParams struct {
	Name  string
	Phone string
	Jid   pgtype.Text
}

func (q *Queries) InsertLeadWh(ctx context.Context, arg InsertLeadWhParams) (LeadWh, error) {
	row := q.db.QueryRow(ctx, insertLeadWh, arg.Name, arg.Phone, arg.Jid)
	var i LeadWh
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Jid,
		&i.CreatedAt,
	)
	return i, err
}

const updateLeadWh = `-- name: UpdateLeadWh :one
UPDATE lead_whs 
SET name = $2, phone = $3
WHERE id = $1
RETURNING id, name, phone, jid, created_at
`

type UpdateLeadWhParams struct {
	ID    int32
	Name  string
	Phone string
}

func (q *Queries) UpdateLeadWh(ctx context.Context, arg UpdateLeadWhParams) (LeadWh, error) {
	row := q.db.QueryRow(ctx, updateLeadWh, arg.ID, arg.Name, arg.Phone)
	var i LeadWh
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Jid,
		&i.CreatedAt,
	)
	return i, err
}
